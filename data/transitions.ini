# This file contains timings and values for transitions in hildon-desktop
# duration = time in milliseconds
# zoom = amount to zoom out the background. 1 = none, 0.5 = zoom to half size
# radius = radius of blur (this is actually the number of blur iterations,
#          so the bigger the number the longer it takes)
# saturation = the amount of colour left in the background (0 = grey, 1 = normal)
# brightness = brightness of the background (0 = black, 1 = normal)          

[blur]
duration = 250

# Zoom out of the task navigator before it fades out
# -- zoom: how much to scale the switcher when going to launcher
#	   (the second layer of the launcher would scale it twice
#	    as much but the switcher is hidden by that time currently)
# -- zoom_for_home: how much to scale the switcher when leaving for home
# -- zoom_duration: the number of miliseconds to spend on zooming
#		    a thumbnail
# -- fly_duration: how long should it take for the thumbnails to rearrange
# 
[task_nav]
zoom = 0.8
zoom_for_home = 1.35
zoom_duration = 250
fly_duration = 250

# Blurring of the home view
# -- radius: amount of iterations of blur filter to perform when not zoooming
#            eg. for dialogs
# -- radius_more: amount of iterations of blur filter to perform when zooming
#                 eg. for launcher/task navigator
# -- saturation: saturation of the background when blurred
# -- brightness: brightness of the background when blurred
# -- zoom: Basic amount to scale the home view by (gets multiplied by how many 
#          'levels' deep the UI is - eg. launcher is one level, launcher submenu
#          is another)
# -- zoom_applets: Amount to scale applets by when zooming out
[home]
radius = 12
radius_more = 16
saturation = 0.8
brightness = 0.4
zoom = 0.93
zoom_applets = 0.9

# The glow effect around launcher buttons
[launcher_glow]
duration_in = 100
duration_out = 200
radius = 10
brightness = 0.75

# The items below are for the transitions that are applied
# to a 'page' of launcher icons
# -- duration: time in ms
# -- depth: amount to move icons backwards and forwards (with perspective)
#           this is pretty much how big or small the icons get     

# Launcher top layer first appearing
[launcher_in]
duration = 500
depth = 150

# Launcher top layer disappearing
[launcher_out]
duration = 250
depth = 100

# launcher top layer disappearing when a layer in front
[launcher_out_back]
duration = 250
depth = 100

# launch animation
[launcher_launch]
duration = 400
depth = 100

# sub-menu appearing
[launcher_in_sub]
duration = 500
depth = 100

# sub-menu disappearing
[launcher_out_sub]
duration = 250
depth = 100

# main disappearing when sub-menu appears
[launcher_back]
duration = 250
depth = 100

# main appearing when sub-menu disappears
[launcher_forward]
duration = 250
depth = 100

# Screen rotation transition
# duration_in = time for rotation before blanking
# duration_out = time for rotation after blanking
# damage_timeout = in the rotation transition, the amount of milliseconds to
#                  leave after we get a damage event before we transition back
#                  from blanking.
# damage_timeout_max = maximum amount of time we may wait if we keep getting
#                      damage events.
# angle = rotation angle for each transition, in degrees. Ideally this is set
#         so that the screen looks like it keeps turning at the same speed 
#         during blanking.
[rotate]
duration_in = 200
duration_out = 250
damage_timeout = 10
damage_timeout_plus = 10
damage_timeout_max = 40
angle = 100

# App close transition
[app_close]
duration = 450

# Popup for dialogs and status menu
[popup]
duration_in = 300
duration_out = 300

# Fade in for banners
# _alpha specifies the final transparency of various things
# currently only banner_note and info_note are supported
[fade]
duration_in = 200
duration_out = 500
banner_note_alpha = 0.85
info_note_alpha = 0.85

# Transition for notification previews
[notification]
duration_in = 400
duration_out = 450

# Sliding subview window transition
[subview]
duration_in = 300
duration_out = 300

[loading_timeout]
# This is multiplied by the load average to find the timeout
# in seconds. before "Unable to load" is displayed.  There is
# a minimum of 10s.
load_average_factor = 7.5

